webSocket实例：
WebSocket 协议本质上是一个基于 TCP 的协议。 为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 
请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息"Upgrade: WebSocket"表明这是一个申请协议升级的 
HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 
WebSocket。连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一
方主动的关闭连接。

ajax轮询(短轮询与长轮询)  =>  https://blog.csdn.net/baidu_38990811/article/details/79172163		
	共同点：
		1. 都是等待客户端发送请求，server才会做相应的处理
		2. 都是轮询请求http，http是无状态协议(无记忆的),也就是说服务端无法对同一客户端的多次http请求进行跟踪，每次请求
		   都要重新对当前客户端的数据进行一次处理,这样会导致每次连接传送的数据量增大。
	短轮询：
		当server收到请求后，不论是否有数据到达都直接响应http请求，如果浏览器收到的数据为空，则隔一段时间，浏览器又会发
		送相同的http请求到server以获取数据响应
		
	长轮询：
		当server收到请求后如果有数据，立刻响应请求；如果没有数据，就会停留一段时间，这段时间内如果server请求的数据
		到达(或某些逻辑以及数据库等操作处理完成)，就会立刻响应；如果该停留时间内还没有处理完成(没有数据响应),则会
		以空数据的形式响应http请求；若浏览器收到的数据为空，会再次发送同样的请求到Server
	
	缺点：server没有数据到达时,http链接会停留一段时间，造成资源浪费
	
webSocket：
	webSocket只需要客户端与服务器建立一次连接，就可以创建持久性的连接，并进行数据双向传输。
	好比它们之间建立了一个传输通道,不需要客户端每次都去请求服务器数据(逻辑操作)是否进行处理完成,当服务器处理好后,
	会主动将数据返回过来,并且该通道一直会在客户端或服务器某一端关闭之前一直存在。
	更直白一点，就是服务器有消息时才会通知客户端，而不是客户端来频繁的请求服务器来确认是否数据更新。

	